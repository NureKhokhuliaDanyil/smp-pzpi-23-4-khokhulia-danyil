Харківський національний університет радіоелектроніки
Факультет комп’ютерних наук
Кафедра програмної інженерії

ЗВІТ
З лабораторної роботи №1
з дисципліни «Скриптові мови програмування»
на тему: «Програмування у скриптовій мові shell (bash)»

Виконав                                                                                                     
ст. гр. ПЗПІ-23-4                                                
Хохуля Даниіл                                           

Перевірив
ст. викладач кафедри ПІ
Сокорчук Ігор Петрович

Харків 2025

1 ІСТОРІЯ ЗМІН

№	Дата		Версія звіту	Опис змін та виправлень
1    16.05.2025	            0.1	        Створено розділи «Історія змін», «Завдання», «Опис виконаної роботи», «Висновки», «Додаток А», «Додаток В»

2 ЗАВДАННЯ
2.1 Мета роботи
Ознайомитися з основами синтаксису та принципами роботи мови РНР. Отримати практичні навички написання програм скриптовими мовами
2.2 Завдання 
Потрібно створити консольний застосунок «Продовольчий магазин "Весна"».
Ім’я користувача не може бути порожнім і повинно містити хоча б одну літеру.
Користувач не може бути молодшим 7-ми або старшим 150-ти років
Щоб завершити роботу та вийти з програми, потрібно ввести число «0».
У програмі потрібно перевіряти інформацію, яку вводить користувач, а саме:
* обраний пункт меню існує;
* обраний товар існує;
* введена кількість товару більша нуля;
* ім’я користувача містить хча б одну літеру;
* вік користувача становить від 7-ми до 150-ти років.
Робота та функціональність створеної програми повинна збігатися із тестовою програмою
			  
3 ОПИС ВИКОНАНОЇ РОБОТИ
Скрипт призначено для автоматичного перетворення CSV-файлу з розкладом занять (у кодуванні Windows-1251) у формат, придатний для імпорту в Google Календар. 
Перш за все в скрипті оголошено усі глобальні зміні які знадобляться для коректної роботи програми. А саме VER, QUIET, GRP, CSV_FILE. 
Після цього за допомогою while циклу реалізуємо роботу ключей згідно з умовою завдання ( --help, --version, -q, --quiet ). За допомогою циклу ми змогли почергово обробити кожен з ключей та реалізувати логіку його роботи. (див. Додаток Б.1)
У наступному блоці коду реалізовано вибір файлу з розкладом з cist зі списку, якщо його не було вказано як параметр запуску застосунка. Цей файл має відповідати шаблону TimeTable_??_??_20??.csv . В цьому блоці коду було використано команду select  для реалізації списку з вибором. (див. Додаток Б.2)
Далі я реалізував функціонал вибору академічної групи, якщо її також не було вказано як параметр запуску. Для цього ми беремо усі згадані в файлі з розкладом групи та пропонуємо користувачу обрати одну з них. У цьому блоці коду я використав команди awk, iconv, sort та uniq, sed. (див. Додаток Б.3)
Після чого ми використовуємо фільтрацію на основі вибраної академічної групи. Ми витягуємо усі рядки які відповідають обраній академічній групі та додає форматування. Отримані дані сортуються за допомогою унікального ключа, побудованого на основі дати та часу, щоб забезпечити правильний порядок подій. (див. Додаток Б.4)
Переходимо до найважливішого блоку коду, безпосередньо формування csv файлу для імпорту в Google календар. Отриманні наші результати з минулого блоку ми переводимо до формату дати MM/DD/YYYY, час встановлюємо у форматі 12 годин AM/PM, та додаємо порядкові номера до занять. В якості інформації яку ми беремо з розкладу це Предмет, час початку та кінця, дата старту та кінця, та опис предмету. Після чого отриманні дані ми записуємо до csv та робимо вивід у консоль якщо немає тихого режиму роботи. (див. Додаток Б.5)
В кінці роботи програми додано блок коду який видаляє тимчасові файли, які були створені під час роботи програми. (див. Додаток Б.6)

4 ВИСНОВКИ
У результаті виконання даної лабораторної роботи я ознайомився основними командами Bash для роботи з файлами та текстовими даними. Навчився використовувати команди select, ls, awk, sort, uniq, tee, cat, set, iconv. Розробив Bash-скрипт для перетворення CSV файла розкладу занять у придатний для імпорту в Google Календар CSV формат.

ДОДАТОК А
Відеозапис
Відеозапис результатів виконання лабораторної роботи: https://youtu.be/Rs_FOr2ZGuo
Хронологічний опис відеозапису: 
00:00 - Оголошення зміних для роботи скрипта
00:28 - Обробка переданих агрументів для керування формату роботи скрипта 
1:18 - Вибір файлу з розкладом якщо його не було передано як параметр командного рядка 
2:30 - Вибір академічної групи на основі парсингу обраного CSV файлу 
4:19 - Вибір формату подальшої роботи скрипта ( звичайний та заглушка) 5:37 - Фільтрація та сортування даних з обраного раніше CSV файлу з розкладом 
9:46 - Запис отриманих данних до Google csv файлу та додавання нумерації до занять 
12:40 - Завершення роботи програми

ДОДАТОК Б
Програмний код застосунку
Github репозиторій в якому розміщено код: https://github.com/NureKhokhuliaDanyil/smp-pzpi-23-4-khokhulia-danyil/blob/main/Lab1/smp-pzpi-23-4-khokhulia-danyil-lab1/smp-pzpi-23-4-khokhulia-danyil-lab1-code
Б.1 Обробка командних параметрів  
  1 #!/bin/bash
  2
  3 VER="1"
  4 QUIET=false
  5 GRP=""
  6 CSV_FILE=""
  7
  8 while [[ $# -gt 0 ]]; do
  9     case "$1" in
 10         --help)
 11             echo "Використання: $0 [назва_групи] [файл.csv]"
 12             echo "  --help         Вивести довідку"
 13             echo "  --version      Вивести версію"
 14             echo "  -q, --quiet    Тихий режим"
 15             exit 0
 16             ;;
 17         --version)
 18             echo "Версія: $VER"
 19             exit 0
 20             ;;
 21         -q|--quiet)
 22             QUIET=true
 23             ;;
 24         *.csv)
 25             CSV_FILE="$1"
 26             ;;
 27         *)
 28             GRP="$1"
 29             ;;
 30     esac
 31     shift
 32 done
 33
 Б.2 Вибір файлу з розкладом  
 34 print() {
 35     [[ "$QUIET" == false ]] && echo "$@"
 36 }
 37
 38 if [[ -z "$CSV_FILE" ]]; then
 39     files_found=($(ls -t TimeTable_??_??_20??.csv 2>/dev/null))
 40     if [[ ${#files_found[@]} -eq 0 ]]; then
 41         echo "Файли TimeTable_ДД_ММ_РРРР.csv не знайдено." >&2
 42         exit 1
 43     fi
 44     files_found+=("Вихід")
 45     print "Оберіть файл:"
 46     select opt in "${files_found[@]}"; do
 47         if [[ "$opt" == "Вихід" ]]; then
 48             print "Вихід."
 49             exit 0
 50         elif [[ -n "$opt" ]]; then
 51             CSV_FILE="$opt"
 52             print "Вибрано: $opt"
 53             break
 54         else
 55             print "Невірно. Повторіть."
 56         fi
 57     done
 58 fi
 59
 60 [[ ! -f "$CSV_FILE" ]] && { echo "Файл '$CSV_FILE' не знайдено." >&2; exit 1; }
 61
  Б.3 Вибір академічної групи  
 62 group_candidates=($(iconv -f cp1251 -t utf-8 "$CSV_FILE" | sed 's/\r/\n/g' | tee __tmp_gr.csv | awk '
 63 BEGIN { FPAT="[^,]*|\"[^\"]*\"" }
 64 NR>1 {
 65     gsub(/^"|"$/, "", $1)
 66     n=split($1,a," ")
 67     for(i=1;i<=n;i++) if(a[i] ~ /^ПЗПІ-23-[0-9]+$/) print a[i]
 68 }' | sort -u))
 69
 70 [[ ${#group_candidates[@]} -eq 0 ]] && { echo "Не знайдено груп формату ПЗПІ-23-N." >&2; exit 1; }
 71
 72 if [[ -n "$GRP" && ${#group_candidates[@]} -eq 1 && "$GRP" != "${group_candidates[0]}" ]]; then
 73     print "Увага: у файлі є лише одна група: ${group_candidates[0]}"
 74     exit 0
 75 fi
 76
 77 if [[ -z "$GRP" ]]; then
 78     if [[ ${#group_candidates[@]} -eq 1 ]]; then
 79         GRP="${group_candidates[0]}"
 80         print "Автовибір групи: $GRP"
 81     else
 82         print "Оберіть групу:"
 83         group_candidates+=("Назад")
 84         select grp in "${group_candidates[@]}"; do
 85             [[ "$grp" == "Назад" ]] && { print "Назад."; exit 0; }
 86             [[ -n "$grp" ]] && { GRP="$grp"; print "Обрано: $GRP"; break; }
 87             print "Невірний вибір."
 88         done
 89     fi
 90 fi
 91
  Б.4 Фільтрація та сортування розкладу за обраною групою  
 92 parse_type=$(iconv -f cp1251 -t utf-8 "$CSV_FILE" | sed 's/\r/\n/g' | awk '
 93 BEGIN { FPAT="[^,]*|\"[^\"]*\"" }
 94 NR > 1 {
 95     gsub(/^"|"$/, "", $1)
 96     split($1, a, " ")
 97     if (a[1] ~ /^ПЗПІ-23-[0-9]+$/) print "std"
 98     else if ($5 ~ /^ПЗПІ-23-[0-9]+$/) print "alt:" $5
 99     exit
100 }')
101
102 if [[ "$parse_type" =~ ^alt:(.+) ]]; then
103     fallback="${BASH_REMATCH[1]}"
104     print "Fallback-режим: $fallback"
105     GRP="$fallback"
106     FB=true
107 else
108     FB=false
109     print "Аналіз розкладу для: $GRP"
110 fi
111
112 filename_date=$(echo "$CSV_FILE" | grep -oE '[0-9]{2}_[0-9]{2}_20[0-9]{2}')
113 OUTFILE="Google_TimeTable_${filename_date}.csv"
114 TMP_A=$(mktemp)
115 TMP_B=$(mktemp)
116
117 iconv -f cp1251 -t utf-8 "$CSV_FILE" | sed 's/\r/\n/g' | awk -v GROUP="$GRP" -v FALL="$FB" '
118 BEGIN { FS=","; OFS="\t" }
119 NR == 1 { next }
120
121 function remove_quotes(x) { gsub(/^"|"$/, "", x); return x }
122 function make_sort_key(d,t){split(d,a,".");split(t,b,":");return sprintf("%04d%02d%02d%02d%02d",a[3],a[2],a[1],b[1],b[2]) }
123
124 {
125     line=$0
126     match(line, /"[0-3][0-9]\.[0-1][0-9]\.[0-9]{4}"/)
127     if(RSTART==0) next
128     left=substr(line,1,RSTART-2); right=substr(line,RSTART)
129     n=0; inq=0; f=""
130     for(i=1;i<=length(right);i++){
131         c=substr(right,i,1)
132         if(c=="\"") inq=!inq
133         else if(c==","&&!inq){ a[++n]=f; f="" }
134         else f=f c
135     }
136     a[++n]=f
137     for(i=1;i<=n;i++) a[i]=remove_quotes(a[i])
138     if(n<12) next
139
140     if(FALL=="true"){ subj=remove_quotes(left) }
141     else {
142         match(left, /(ПЗПІ-[0-9]+-[0-9]+)[[:space:]]*-[[:space:]]*/, m)
143         if(m[1] != GROUP) next
144         left=substr(left,RSTART+RLENGTH)
145         gsub(/^[[:space:]]+/, "", left)
146         subj=left
147     }
148
149     typ="Інше"
150     if(a[11] ~ /Лб/) typ="Лб"
151     else if(a[11] ~ /Лк/) typ="Лк"
152     else if(a[11] ~ /Пз/) typ="Пз"
153     else if(a[11] ~ /Екз|Exam|екзамен/i) typ="Екз"
154
155     print subj, typ, a[1], a[2], a[3], a[4], a[11], make_sort_key(a[1],a[2])
156 }
157 ' > "$TMP_A"
158
159 sort -t $'\t' -k8,8 "$TMP_A" > "$TMP_B"
160
Б.5 Формування CSV файлу
161 awk -F'\t' '
162 BEGIN {
163     OFS = ",";
164     print "Subject", "Start Date", "Start Time", "End Date", "End Time", "Description"
165 }
166
167 function format_date(input) {
168     split(input, parts, ".");
169     return sprintf("%02d/%02d/%04d", parts[2], parts[1], parts[3])
170 }
171
172 function format_time(input) {
173     split(input, t, ":");
174     h = t[1] + 0;
175     m = t[2];
176     ap = (h >= 12) ? "PM" : "AM";
177     if (h == 0) h = 12;
178     else if (h > 12) h -= 12;
179     return sprintf("%02d:%s %s", h, m, ap)
180 }
181
182 {
183     key = $1 "_" $2;
184     date_key = $3 "_" $7;
185
186     if ($2 == "Лб") {
187         if (!(date_key in mark)) {
188             count[key]++;
189             mark[date_key] = count[key]
190         }
191         num = mark[date_key]
192     } else {
193         count[key]++;
194         num = count[key]
195     }
196
197     subject_name = $1 "; №" num
198     print "\"" subject_name "\"", "\"" format_date($3) "\"", "\"" format_time($4) "\"", "\"" format_date($5) "\"", "\"" format_time($6) "\"", "\"" $7 "\""
199 }
200 ' "$TMP_B" > "$OUTFILE"
201
202
Б.6 Вивід інформації про завершення роботи програми та видалення тимчасових файлів
203 [[ "$QUIET" == false ]] && cat "$OUTFILE"
204 echo "[ІНФО] Створено файл: $OUTFILE"
205
206 rm -f "$TMP_A" "$TMP_B" __tmp_gr.csv
