Харківський національний університет радіоелектроніки
Факультет комп’ютерних наук
Кафедра програмної інженерії

ЗВІТ
з практичної роботи № 1
з дисципліни «Скриптові мови програмування»

Виконав
ст. гр. ПЗПІ-23-4
Хохуля Даниіл Андрійович

Перевірив
ст. викладач катедри ПІ
Сокорчук Ігор Петрович

Харків 2025

ПРОГРАМУВАННЯ НА МОВІ BASH
1.1 Мета роботи: Ознайомитися з синтаксисом та можливостями скриптової мови програмування Bash. Навчитися створювати власні скрипти використовуючи Bash.
1.2 Хід роботи
Спочатку було створено файл з розширеням .sh під назвою pzpi-23-4-khokhulia-danyil-task1.sh за допомогою команди touch ~/pzpi-23-4-khokhulia-danyil-task1.
	
До цього файлу було надано доступ до виконання для усіх користувачів системи. Це було зроблено за допомогою команди chmod +x pzpi-23-4-khokhulia-danyil-task1.sh.

Правильність роботи скрипта було перевірено за допомогою команди pzpi23-one-task1-check ./pzpi-23-4-khokhulia-danyil-task1.sh та задовільним результатом який наведено на рис. 1.

Висновки: Під час виконання данного практичного заняття я ознайомився з синтаксисом та можливостями скриптової мови програмування Bash. Навчився створювати власні скрипти використовуючи Bash.
 
 
ДОДАТОК А
Скрипт для створення ялинки на скриптовій мові програмування Bash
GitHub репозиторій: https://github.com/NureKhokhuliaDanyil/smp-pzpi-23-4-khokhulia-danyil/blob/main/Pract1/smp-pzpi-23-4-khokhulia-danyil-pract1/smp-pzpi-23-4-khokhulia-danyil-pract1-code
  1 #!/bin/bash
  2
  3 draw_row() {
  4     local full=$1
  5     local input_length=$2
  6     local char=$3
  7     local half_spaces=$(((full - input_length) / 2))
  8
  9     printf "%*s" $half_spaces ""
 10     printf "%*s" $input_length "" | tr " " "$char"
 11     echo
 12 }
 13
 14 toggle_symbol() {
 15     local current=$1
 16     [[ "$current" == "*" ]] && echo "#" || echo "*"
 17 }
 18
 19 tree_height=$1
 20 snow_width=$2
 21
 22 is_positive=0
 23 until [ $is_positive -eq 1 ]; do
 24     if [ "$tree_height" -le 0 ] || [ "$snow_width" -le 0 ]; then
 25         echo "Error: use numbers for input" >&2
 26         exit 1
 27     fi
 28     is_positive=1
 29 done
 30
 31 MIN_HEIGHT=8
 32 MIN_WIDTH=7
 33
 34 if [ "$tree_height" -lt $MIN_HEIGHT ] || [ "$snow_width" -lt $MIN_WIDTH ]; then
 35     echo "Error: try to use another values current are to small" >&2
 36     exit 1
 37 fi
 38
 39 difference_between_params=$((tree_height - snow_width))
 40
 41 if [ "$difference_between_params" -lt 0 ] || [ "$difference_between_params" -gt 2 ]; then
 42     echo "Error: incorrect values for height and width" >&2
 43     exit 1
 44 fi
 45
 46 IS_HEIGHT_EVEN=$((tree_height % 2 == 0))
 47 IS_WIDTH_EVEN=$((snow_width % 2 == 0))
 48 IS_HEIGHT_ODD=$((tree_height % 2 != 0))
 49 IS_WIDTH_ODD=$((snow_width % 2 != 0))
 50
 51 if [ "$IS_HEIGHT_ODD" -eq 1 ] && [ "$IS_WIDTH_ODD" -eq 1 ] && [ "$difference_between_params" -eq 0 ]; then
 52     echo "Error: incorrect values for height and width" >&2
 53     exit 1
 54 fi
 55
 56 if [ "$IS_HEIGHT_EVEN" -eq 1 ] && [ "$IS_WIDTH_EVEN" -eq 1 ] && [ "$difference_between_params" -eq 2 ]; then
 57     echo "Error: incorrect values for height and width" >&2
 58     exit 1
 59 fi
 60
 61 if [ $((snow_width % 2)) -eq 0 ]; then
 62     snow_width=$((snow_width - 1))
 63 fi
 64
 65 if [ "$difference_between_params" -eq 2 ] && [ "$IS_HEIGHT_EVEN" -eq 1 ] && [ "$IS_WIDTH_ODD" -eq 1 ]; then
 66     tree_height=$((tree_height - 1))
 67 fi
 68
 69 if [ "$IS_HEIGHT_ODD" -eq 1 ] && [ "$IS_WIDTH_ODD" -eq 1 ] && [ "$difference_between_params" -eq 2 ]; then
 70     tree_height=$((tree_height - 1))
 71 fi
 72
 73 final_height=$tree_height
 74 final_width=$snow_width
 75
 76 if [ $tree_height -eq $((snow_width + 1)) ] && ! ([ $((tree_height % 2)) -eq 0 ] && [ $((snow_width % 2)) -eq 1 ]); then
 77     final_height=$((tree_height - 1))
 78 fi
 79
 80 if [ $snow_width -eq $((tree_height - 2)) ] && [ $((snow_width % 2)) -eq 1 ] && [ $((tree_height % 2)) -eq 1 ]; then
 81     final_height=$((tree_height - 1))
 82 fi
 83
 84 if [ $((final_width % 2)) -eq 0 ]; then
 85     final_width=$((final_width - 1))
 86 fi
 87
 88 part_height_for_calculation=$((final_height - 3))
 89 first_tier_size=$((part_height_for_calculation / 2 + part_height_for_calculation % 2))
 90 second_tier_size=$((part_height_for_calculation / 2))
 91
 92 j=1
 93 char="*"
 94
 95 for ((row = 1; row <= first_tier_size; row++)); do
 96     draw_row $final_width $j "$char"
 97     j=$((j + 2))
 98     char=$(toggle_symbol "$char")
 99 done
100
101 j=3
102 row=0
103
104 while [ $row -lt $second_tier_size ]; do
105     draw_row $final_width $j "$char"
106     j=$((j + 2))
107     char=$(toggle_symbol "$char")
108     row=$((row + 1))
109 done
110
111 for i in {1..2}; do
112     draw_row $final_width 3 "#"
113 done
114
115 draw_row $final_width $final_width "*"
116
117 exit 0